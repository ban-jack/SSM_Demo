<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!--
            spring的配置文件，这里主要配置和业务逻辑相关的
            比如说数据源，事物控制等等都在这里控制。
        -->

    <!-- =====================扫描除了控制器以外的============================-->
    <context:component-scan base-package="com.ssm" >
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"></context:exclude-filter>
    </context:component-scan>

    <!-- =====================引入配置文件（数据源的配置）======================-->
    <context:property-placeholder location="classpath:dbconfig.properties"></context:property-placeholder>
    <bean id="pooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driverClass}"></property>
        <property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
        <property name="user" value="${jdbc.user}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>

    <!-- =====================配置与MyBatis的整合============================-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--指定MyBatis全局配置文件的位置-->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <!--指定数据源-->
        <property name="dataSource" ref="pooledDataSource"></property>
        <!--指定MyBatis的mapper文件的位置，扫描所有.xml文件-->
        <property name="mapperLocations" value="classpath:mapper/*.xml"></property>
    </bean>

    <!--配置扫描器，将mybatis接口的实现加入到IOC容器中-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--扫描所有dao接口的实现，加入到IOC容器中-->
        <property name="basePackage" value="com.ssm.crud.dao"></property>
    </bean>


    <!--配置一个可以执行批量的sqlSession-->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
        <constructor-arg name="executorType" value="BATCH"></constructor-arg>
    </bean>

    <!-- ======================事物控制的配置=================================-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--控制住数据源-->
        <property name="dataSource" ref="pooledDataSource"></property>
    </bean>
    <!--可以开启基于注解的事物，也可以使用xml配置形式的事物，（比较重要的都是使用配置事物）-->
    <aop:config>
        <!--配置切入点（实际被增强的方法）-->
        <aop:pointcut id="txPoint" expression="execution(* com.ssm.crud.service..*(..))"/>
        <!--配置切面（把通知应用到切入点的过程）-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
    </aop:config>

    <!--配置通知（实际上增强的部分），也就是配置事物如何切入，
        transaction-manager的值填的是你上面自己定义的id  默认为transactionManager
    -->
    <tx:advice id="txAdvice" >
        <tx:attributes>
            <!--所有方法都是事务方法-->
            <tx:method name="*"></tx:method>
            <!--以get开头的所有方法,只做查询
                readOnly 默认值 false，表示可以查询，可以添加修改删除操作
                设置 readOnly 值是 true，设置成 true 之后，只能查询
            -->
            <tx:method name="get" read-only="true"></tx:method>
        </tx:attributes>
    </tx:advice>

    <!-- Spring 配置文件的核心点（数据源、与mybatis的整合、事务控制）-->
</beans>